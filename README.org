[[https://github.com/ROCKTAKEY/cookiecutter-emacs-lisp][https://img.shields.io/github/tag/ROCKTAKEY/cookiecutter-emacs-lisp.svg?style=flat-square]]
[[file:LICENSE][https://img.shields.io/github/license/ROCKTAKEY/cookiecutter-emacs-lisp.svg?style=flat-square]]
* Cookiecutter template for Emacs package
Cookiecutter template for Emacs package to publish in GitHub!

- Test with =ert= (run by =keg run test= or =keg run test-all=)
- Coverage measurement with [[https://github.com/undercover-el/undercover.el][undercover.el]]
- Sending coverage to [[https://codecov.io/][codecov]]
- Package management with [[https://github.com/conao3/keg.el][keg.el]]

* How to Use?
1. Install cookiecutter. See [[https://cookiecutter.readthedocs.io][document]].
2. Install keg. See [[https://github.com/conao3/keg.el#install][document]].
3. Run shell command to create new Emacs package:
   #+BEGIN_SRC shell
     cookiecutter https://github.com/ROCKTAKEY/cookiecutter-emacs-lisp
   #+END_SRC
   You can use =-f= option to use this template to existing directory.
   Note that this option allow cookiecutter to overwrite existing files.

* Usage
** Main file
The main file is el file on root. Write your code here.
Of course, you can add any el files.

** Dependency
You can install all dependency by command:
#+BEGIN_SRC shell
  keg install
#+END_SRC
Note that you should re-run this command if you edit dependency and dev-dependency.

If you want to add dependency, add to =Package-Reqiures:= section in *main file* header like:
#+BEGIN_SRC emacs-lisp
  ;; Package-Requires: ((emacs "24.1") (new-dependency1 "1.0") (new-dependency "4.1.5"))
#+END_SRC

If you want to add dev-dependency, add to *Keg file* like:
#+BEGIN_SRC emacs-lisp
  (dev-dependency undercover
                  new-dev-dependency-1
                  new-dev-dependency-2)
#+END_SRC

** Linting and testing
*** Linting
No error and warning from =package-lint=, =checkdoc= and =byte-compiler= (run by =keg lint=) is on this template.
Keeping no error keeps your code clean.
All your commits are linted on GitHub Actions, so you can notice warnings immediately.

To lint on command line, run:
#+BEGIN_SRC shell
keg lint
#+END_SRC

To byte-compile, run:
#+BEGIN_SRC shell
keg build
#+END_SRC

To remove byte-compiled files, run:
#+BEGIN_SRC shell
keg clean-elc
#+END_SRC

To remove all dependencies and byte-compiled files, run:
#+BEGIN_SRC shell
keg clean
#+END_SRC

*** Testing
You can test your project by =ert=.

Coverage is automatically measured by undercover.el and sent to codecov, if you use public repository.
You should set environmental variable and put it into =.github/workflows/test.yml=.
See [[https://github.com/marketplace/actions/codecov#usage][here]].

To run short test (without byte-compile) on command line, run:
#+BEGIN_SRC shell
keg run test
#+END_SRC

To run full test (with and without byte-compile) on command line, run:
#+BEGIN_SRC shell
keg run test-all
#+END_SRC

** Other keg features
You can see help by command:
#+BEGIN_SRC shell
  keg help
#+END_SRC

To get more information, See [[https://github.com/conao3/keg.el][document]].

** How to change license from GPL-3.0-or-later to another one
1. Change LICENSE file
2. Change "License" section, which is on bottom of README.org
3. Change Emacs Lisp file header like:
   #+BEGIN_SRC emacs-lisp
     ;; This program is free software; you can redistribute it and/or modify
     ;; it under the terms of the GNU General Public License as published by
     ;; the Free Software Foundation, either version 3 of the License, or
     ;; (at your option) any later version.
   #+END_SRC
   Note that the test file in "test" directory also has same header.
4. Change =SPDX-License-Identifier= header in Emacs Lisp file
   =SPDX-License-Identifier= describe license of the current file.
   See [[https://spdx.org/licenses/][SPDX License List]] for available license identifier.
   #+BEGIN_SRC emacs-lisp
     ;; SPDX-License-Identifier:  GPL-3.0-or-later
   #+END_SRC

* Variables
** project_name
Project name for Emacs package. This is used as filename and feature symbol of the package.
It should be =chain-case=.

** github_repository_name
Repository name in GitHub. By default, =project_name= is used.
This is used to generate URL of your project.

** project_short_description
Short description of your project. This is used as header of README and main Emacs Lisp file.
It should not include the word "Emacs" because =package-lint= warn if header of main file include the word.

** email, full_name
Your email address and full name. They are used as header of Emacs Lisp file.

** github_username
Your username in GitHub. This is used to generate URL of your project.

** year
Current year. Usually, you do not have to edit this. This is used to create copyright section in header of main file.

** keyword
Keyword which represents your project. It is used as header of main file, and as parent group of ~defgroup~.
You can set another group as parent group of ~defgroup~ if your package deeply depends on other package.
Note that keword section in header of main file can include multiple keyword, so you can add additional keywords
from the options, but any other keyword like group defined by =defgroup= is not permitted.

* License
  This package is licensed by GPLv3. See [[file:LICENSE][LICENSE]].
